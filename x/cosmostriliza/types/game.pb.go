// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmostriliza/game.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameState int32

const (
	GameState_OPEN    GameState = 0
	GameState_ONGOING GameState = 1
	GameState_OWINS   GameState = 2
	GameState_XWINS   GameState = 3
	GameState_DRAW    GameState = 4
)

var GameState_name = map[int32]string{
	0: "OPEN",
	1: "ONGOING",
	2: "OWINS",
	3: "XWINS",
	4: "DRAW",
}

var GameState_value = map[string]int32{
	"OPEN":    0,
	"ONGOING": 1,
	"OWINS":   2,
	"XWINS":   3,
	"DRAW":    4,
}

func (x GameState) String() string {
	return proto.EnumName(GameState_name, int32(x))
}

func (GameState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b89d22db3ab81f20, []int{0}
}

type Mark int32

const (
	Mark_EMPTY   Mark = 0
	Mark_XPLAYER Mark = 1
	Mark_OPLAYER Mark = 2
)

var Mark_name = map[int32]string{
	0: "EMPTY",
	1: "XPLAYER",
	2: "OPLAYER",
}

var Mark_value = map[string]int32{
	"EMPTY":   0,
	"XPLAYER": 1,
	"OPLAYER": 2,
}

func (x Mark) String() string {
	return proto.EnumName(Mark_name, int32(x))
}

func (Mark) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b89d22db3ab81f20, []int{1}
}

type Game struct {
	Creator     string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Rows        uint32    `protobuf:"varint,3,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols        uint32    `protobuf:"varint,4,opt,name=cols,proto3" json:"cols,omitempty"`
	Strike      uint32    `protobuf:"varint,5,opt,name=strike,proto3" json:"strike,omitempty"`
	Reward      uint32    `protobuf:"varint,6,opt,name=reward,proto3" json:"reward,omitempty"`
	GameState   GameState `protobuf:"varint,7,opt,name=gameState,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.GameState" json:"gameState,omitempty"`
	Board       []Mark    `protobuf:"varint,8,rep,packed,name=board,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.Mark" json:"board,omitempty"`
	NumOfMoves  uint32    `protobuf:"varint,9,opt,name=numOfMoves,proto3" json:"numOfMoves,omitempty"`
	Guest       string    `protobuf:"bytes,10,opt,name=guest,proto3" json:"guest,omitempty"`
	CreatorMark Mark      `protobuf:"varint,11,opt,name=creatorMark,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.Mark" json:"creatorMark,omitempty"`
	GuestMark   Mark      `protobuf:"varint,12,opt,name=guestMark,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.Mark" json:"guestMark,omitempty"`
	NextMark    Mark      `protobuf:"varint,13,opt,name=nextMark,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.Mark" json:"nextMark,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89d22db3ab81f20, []int{0}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Game) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Game) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *Game) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *Game) GetStrike() uint32 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *Game) GetReward() uint32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *Game) GetGameState() GameState {
	if m != nil {
		return m.GameState
	}
	return GameState_OPEN
}

func (m *Game) GetBoard() []Mark {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *Game) GetNumOfMoves() uint32 {
	if m != nil {
		return m.NumOfMoves
	}
	return 0
}

func (m *Game) GetGuest() string {
	if m != nil {
		return m.Guest
	}
	return ""
}

func (m *Game) GetCreatorMark() Mark {
	if m != nil {
		return m.CreatorMark
	}
	return Mark_EMPTY
}

func (m *Game) GetGuestMark() Mark {
	if m != nil {
		return m.GuestMark
	}
	return Mark_EMPTY
}

func (m *Game) GetNextMark() Mark {
	if m != nil {
		return m.NextMark
	}
	return Mark_EMPTY
}

type MsgCreateGame struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Rows    uint32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols    uint32 `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
	Strike  uint32 `protobuf:"varint,4,opt,name=strike,proto3" json:"strike,omitempty"`
	Reward  uint32 `protobuf:"varint,5,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *MsgCreateGame) Reset()         { *m = MsgCreateGame{} }
func (m *MsgCreateGame) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGame) ProtoMessage()    {}
func (*MsgCreateGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89d22db3ab81f20, []int{1}
}
func (m *MsgCreateGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGame.Merge(m, src)
}
func (m *MsgCreateGame) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGame) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGame.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGame proto.InternalMessageInfo

func (m *MsgCreateGame) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGame) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MsgCreateGame) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *MsgCreateGame) GetStrike() uint32 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *MsgCreateGame) GetReward() uint32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type MsgCommitMove struct {
	Player Mark  `protobuf:"varint,1,opt,name=player,proto3,enum=misaakidis.cosmostriliza.cosmostriliza.Mark" json:"player,omitempty"`
	Row    int32 `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Col    int32 `protobuf:"varint,3,opt,name=col,proto3" json:"col,omitempty"`
}

func (m *MsgCommitMove) Reset()         { *m = MsgCommitMove{} }
func (m *MsgCommitMove) String() string { return proto.CompactTextString(m) }
func (*MsgCommitMove) ProtoMessage()    {}
func (*MsgCommitMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89d22db3ab81f20, []int{2}
}
func (m *MsgCommitMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitMove.Merge(m, src)
}
func (m *MsgCommitMove) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitMove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitMove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitMove proto.InternalMessageInfo

func (m *MsgCommitMove) GetPlayer() Mark {
	if m != nil {
		return m.Player
	}
	return Mark_EMPTY
}

func (m *MsgCommitMove) GetRow() int32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *MsgCommitMove) GetCol() int32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func init() {
	proto.RegisterEnum("misaakidis.cosmostriliza.cosmostriliza.GameState", GameState_name, GameState_value)
	proto.RegisterEnum("misaakidis.cosmostriliza.cosmostriliza.Mark", Mark_name, Mark_value)
	proto.RegisterType((*Game)(nil), "misaakidis.cosmostriliza.cosmostriliza.Game")
	proto.RegisterType((*MsgCreateGame)(nil), "misaakidis.cosmostriliza.cosmostriliza.MsgCreateGame")
	proto.RegisterType((*MsgCommitMove)(nil), "misaakidis.cosmostriliza.cosmostriliza.MsgCommitMove")
}

func init() { proto.RegisterFile("cosmostriliza/game.proto", fileDescriptor_b89d22db3ab81f20) }

var fileDescriptor_b89d22db3ab81f20 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc6, 0x21, 0xa1, 0xe4, 0x31, 0x50, 0x64, 0x55, 0x93, 0xb5, 0x43, 0x84, 0x38, 0x4c, 0xa8,
	0xdb, 0x88, 0xd6, 0xdd, 0x76, 0x2b, 0x2b, 0x62, 0x9d, 0x46, 0x82, 0xd2, 0x4a, 0x6d, 0x77, 0x33,
	0xc1, 0xcb, 0x22, 0x48, 0x8d, 0xe2, 0x30, 0xca, 0x6e, 0xfb, 0x07, 0xfb, 0x3b, 0xfb, 0x07, 0x3b,
	0xf6, 0xb8, 0xe3, 0x04, 0x7f, 0x64, 0xb2, 0x0d, 0x05, 0xa4, 0x4e, 0x6b, 0x7b, 0xfb, 0xde, 0x27,
	0x7f, 0x9f, 0xdf, 0xb3, 0x3f, 0x3d, 0x20, 0x11, 0x17, 0x29, 0x17, 0x79, 0x96, 0x8c, 0x93, 0x6f,
	0xd4, 0x8b, 0x69, 0xca, 0x5a, 0x93, 0x8c, 0xe7, 0x1c, 0x3f, 0x4f, 0x13, 0x41, 0xe9, 0x28, 0x19,
	0x26, 0xa2, 0xb5, 0x73, 0x68, 0xb7, 0x7a, 0xb6, 0x1f, 0xf3, 0x98, 0x2b, 0x89, 0x27, 0x91, 0x56,
	0x37, 0x7e, 0x9a, 0x60, 0x76, 0x69, 0xca, 0x30, 0x81, 0xbd, 0x28, 0x63, 0x34, 0xe7, 0x19, 0x41,
	0x75, 0xd4, 0xb4, 0xc3, 0x75, 0x89, 0x6b, 0x60, 0x24, 0x43, 0x62, 0x28, 0xd2, 0x48, 0x86, 0x18,
	0x83, 0x99, 0xf1, 0x99, 0x20, 0xc5, 0x3a, 0x6a, 0x56, 0x43, 0x85, 0x25, 0x17, 0xf1, 0xb1, 0x20,
	0xa6, 0xe6, 0x24, 0xc6, 0x4f, 0xa1, 0x24, 0x2f, 0x1f, 0x31, 0x62, 0x29, 0x76, 0x55, 0x49, 0x3e,
	0x63, 0x33, 0x9a, 0x0d, 0x49, 0x49, 0xf3, 0xba, 0xc2, 0x01, 0xd8, 0x72, 0xac, 0xd3, 0x9c, 0xe6,
	0x8c, 0xec, 0xd5, 0x51, 0xb3, 0x76, 0xf8, 0xba, 0x75, 0xbf, 0xe1, 0x5a, 0xdd, 0xb5, 0x30, 0xdc,
	0x78, 0xe0, 0x36, 0x58, 0x03, 0x2e, 0xef, 0x29, 0xd7, 0x8b, 0xcd, 0xda, 0xe1, 0xcb, 0xfb, 0x9a,
	0xf5, 0x68, 0x36, 0x0a, 0xb5, 0x14, 0xbb, 0x00, 0x57, 0xd3, 0x34, 0xf8, 0xdc, 0xe3, 0x5f, 0x99,
	0x20, 0xb6, 0x6a, 0x78, 0x8b, 0xc1, 0xfb, 0x60, 0xc5, 0x53, 0x26, 0x72, 0x02, 0xea, 0x7d, 0x74,
	0x81, 0x7d, 0xa8, 0xac, 0x5e, 0x4f, 0x7a, 0x91, 0x8a, 0x1a, 0xe6, 0x61, 0xf7, 0x6f, 0x1b, 0xe0,
	0x0f, 0x60, 0x2b, 0x63, 0xe5, 0xf6, 0xe4, 0x11, 0x6e, 0x1b, 0x39, 0x7e, 0x0f, 0xe5, 0x2b, 0x76,
	0xad, 0xad, 0xaa, 0x8f, 0xb0, 0xba, 0x55, 0x37, 0xbe, 0x23, 0xa8, 0xf6, 0x44, 0xfc, 0x4e, 0x36,
	0xca, 0xfe, 0x13, 0xa2, 0x75, 0x68, 0x8c, 0x3b, 0x42, 0x53, 0xbc, 0x33, 0x34, 0xe6, 0x3f, 0x42,
	0x63, 0x6d, 0x87, 0xa6, 0x31, 0xd7, 0x2d, 0xf0, 0x34, 0x4d, 0x72, 0xf9, 0x23, 0xf8, 0x18, 0x4a,
	0x93, 0x31, 0x9d, 0x33, 0xdd, 0xc1, 0x43, 0x87, 0x5b, 0x69, 0xb1, 0x03, 0xc5, 0x8c, 0xcf, 0x54,
	0xb7, 0x56, 0x28, 0xa1, 0x64, 0x22, 0x3e, 0x56, 0xbd, 0x5a, 0xa1, 0x84, 0x07, 0x6d, 0xb0, 0x6f,
	0x63, 0x87, 0xcb, 0x60, 0x06, 0xfd, 0x8e, 0xef, 0x14, 0x70, 0x05, 0xf6, 0x02, 0xbf, 0x1b, 0x9c,
	0xf8, 0x5d, 0x07, 0x61, 0x1b, 0xac, 0xe0, 0xfc, 0xc4, 0x3f, 0x75, 0x0c, 0x09, 0x2f, 0x14, 0x2c,
	0xca, 0xc3, 0xc7, 0xe1, 0xd1, 0xb9, 0x63, 0x1e, 0xbc, 0x00, 0x53, 0x7d, 0x8a, 0x0d, 0x56, 0xa7,
	0xd7, 0x3f, 0xbb, 0xd4, 0xfa, 0x8b, 0xfe, 0xc7, 0xa3, 0xcb, 0x4e, 0xe8, 0x20, 0x65, 0xb6, 0x2a,
	0x8c, 0xf6, 0xd9, 0xaf, 0x85, 0x8b, 0x6e, 0x16, 0x2e, 0xfa, 0xb3, 0x70, 0xd1, 0x8f, 0xa5, 0x5b,
	0xb8, 0x59, 0xba, 0x85, 0xdf, 0x4b, 0xb7, 0xf0, 0xe9, 0x6d, 0x9c, 0xe4, 0x5f, 0xa6, 0x83, 0x56,
	0xc4, 0x53, 0x6f, 0x33, 0xae, 0xa7, 0x07, 0x7c, 0xb5, 0x5e, 0x1a, 0xd7, 0xde, 0xee, 0x12, 0xc9,
	0xe7, 0x13, 0x26, 0x06, 0x25, 0xb5, 0x08, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x71, 0x3c,
	0x9b, 0x5b, 0x62, 0x04, 0x00, 0x00,
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextMark != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.NextMark))
		i--
		dAtA[i] = 0x68
	}
	if m.GuestMark != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.GuestMark))
		i--
		dAtA[i] = 0x60
	}
	if m.CreatorMark != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.CreatorMark))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Guest) > 0 {
		i -= len(m.Guest)
		copy(dAtA[i:], m.Guest)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Guest)))
		i--
		dAtA[i] = 0x52
	}
	if m.NumOfMoves != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.NumOfMoves))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Board) > 0 {
		dAtA2 := make([]byte, len(m.Board)*10)
		var j1 int
		for _, num := range m.Board {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGame(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if m.GameState != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.GameState))
		i--
		dAtA[i] = 0x38
	}
	if m.Reward != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Reward))
		i--
		dAtA[i] = 0x30
	}
	if m.Strike != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Strike))
		i--
		dAtA[i] = 0x28
	}
	if m.Cols != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Cols))
		i--
		dAtA[i] = 0x20
	}
	if m.Rows != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reward != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Reward))
		i--
		dAtA[i] = 0x28
	}
	if m.Strike != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Strike))
		i--
		dAtA[i] = 0x20
	}
	if m.Cols != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Cols))
		i--
		dAtA[i] = 0x18
	}
	if m.Rows != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Col != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Col))
		i--
		dAtA[i] = 0x18
	}
	if m.Row != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Row))
		i--
		dAtA[i] = 0x10
	}
	if m.Player != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Player))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovGame(uint64(m.Rows))
	}
	if m.Cols != 0 {
		n += 1 + sovGame(uint64(m.Cols))
	}
	if m.Strike != 0 {
		n += 1 + sovGame(uint64(m.Strike))
	}
	if m.Reward != 0 {
		n += 1 + sovGame(uint64(m.Reward))
	}
	if m.GameState != 0 {
		n += 1 + sovGame(uint64(m.GameState))
	}
	if len(m.Board) > 0 {
		l = 0
		for _, e := range m.Board {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	if m.NumOfMoves != 0 {
		n += 1 + sovGame(uint64(m.NumOfMoves))
	}
	l = len(m.Guest)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.CreatorMark != 0 {
		n += 1 + sovGame(uint64(m.CreatorMark))
	}
	if m.GuestMark != 0 {
		n += 1 + sovGame(uint64(m.GuestMark))
	}
	if m.NextMark != 0 {
		n += 1 + sovGame(uint64(m.NextMark))
	}
	return n
}

func (m *MsgCreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovGame(uint64(m.Rows))
	}
	if m.Cols != 0 {
		n += 1 + sovGame(uint64(m.Cols))
	}
	if m.Strike != 0 {
		n += 1 + sovGame(uint64(m.Strike))
	}
	if m.Reward != 0 {
		n += 1 + sovGame(uint64(m.Reward))
	}
	return n
}

func (m *MsgCommitMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != 0 {
		n += 1 + sovGame(uint64(m.Player))
	}
	if m.Row != 0 {
		n += 1 + sovGame(uint64(m.Row))
	}
	if m.Col != 0 {
		n += 1 + sovGame(uint64(m.Col))
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			m.Strike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strike |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameState", wireType)
			}
			m.GameState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameState |= GameState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v Mark
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Mark(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Board = append(m.Board, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGame
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Board) == 0 {
					m.Board = make([]Mark, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Mark
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Mark(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Board = append(m.Board, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfMoves", wireType)
			}
			m.NumOfMoves = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfMoves |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorMark", wireType)
			}
			m.CreatorMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorMark |= Mark(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestMark", wireType)
			}
			m.GuestMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuestMark |= Mark(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMark", wireType)
			}
			m.NextMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextMark |= Mark(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			m.Strike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strike |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			m.Player = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Player |= Mark(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
